{
	"author": {
		"name": "namishh",
		"url": "https://namishh.me",
		"image": "https://github.com/namishh.png",
		"github": "https://github.com/namishh",
		"twitter": "https://twitter.com/namishh_"
	},
	"lesson": "Practical DSA",
	"months": [
		{
			"month": 1,
			"weeks": [
				{
					"week": 1,
					"description": "Starting Out",
					"tasks": [
						{
							"type": "Video",
							"content": "C++ Tutorial",
							"url": "https://www.youtube.com/watch?v=-TkoO8Z07hI"
						},
						{
							"type": "Video",
							"content": "ImGUI Tutorial",
							"url": "https://www.youtube.com/watch?v=vWXrFetSH8w",
							"list": [
								"You can use imgui to make GUI version of the projects"
							]
						},
						{
							"type": "Resource",
							"content": "Static arrays",
							"url": "https://hank.feild.org/feild-guide-cpp/arrays.html"
						},
						{
							"type": "Video",
							"content": "Dynamic Arrays",
							"url": "https://www.youtube.com/watch?v=igSuiwB7pBU"
						},
						{
							"type": "Resource",
							"content": "Multidimensional Arrays",
							"url": "https://www.cplusoop.com/programming-cplus/module4/dynamic-multidimensional-arrays.php"
						},
						{
							"type": "Resource",
							"content": "Basics of Strings",
							"url": "https://www.kindsonthegenius.com/cplusplus/c-string-manipulation/"
						},
						{
							"type": "Project",
							"content": "Dynamic Array Implementation",
							"list": [
								"Build a Python-like list with automatic resizing"
							]
						},
						{
							"type": "Project",
							"content": "Password Validator and Generator",
							"list": [
								"Validate a password based on certain criteria",
								"Generate a strong password based on user input"
							]
						}
					]
				},
				{
					"week": 2,
					"description": "Linked Lists",
					"tasks": [
						{
							"type": "Video",
							"content": "Singly Linked List",
							"url": "https://www.youtube.com/watch?v=VOpjAHCee7c"
						},
						{
							"type": "Video",
							"content": "Doubly Linked List",
							"url": "https://www.youtube.com/watch?v=VOQNf1VxU3Q"
						},
						{
							"type": "Resource",
							"content": "Circular Linked List",
							"url": "https://www.softwaretestinghelp.com/circular-linked-list/"
						},
						{
							"type": "Resource",
							"content": "Cycle Detection in a Linked List",
							"url": "https://cp-algorithms.com/others/tortoise_and_hare.html"
						},
						{
							"type": "Resource",
							"content": "Merge Two Sorted Linked Lists",
							"url": "https://takeuforward.org/data-structure/merge-two-sorted-linked-lists/"
						},
						{
							"type": "Resource",
							"content": "XOR Linked List",
							"url": "https://www.geeksforgeeks.org/xor-linked-list-a-memory-efficient-doubly-linked-list-set-1/"
						},
						{
							"type": "Project",
							"content": "Simulating browser history",
							"list": [
								"Using XOR linked list, create a basic browser history implementation where you can go back and forward"
							]
						},
						{
							"type": "Project",
							"content": "Make a music player",
							"list": [
								"Use doubly linked list to implement a music player",
								"Enable people to add, remove or move music to different playlists",
								"Add features like play next, play previous, shuffle, etc."
							]
						}
					]
				},
				{
					"week": 3,
					"description": "Stacks and Queues",
					"tasks": [
						{
							"type": "Video",
							"content": "Implement a stack using a linked list",
							"url": "https://www.youtube.com/watch?v=MuwxQ2IB8lQ"
						},
						{
							"type": "Video",
							"content": "Implement a queue using a linked list",
							"url": "https://www.youtube.com/watch?v=A5_XdiK4J8A"
						},
						{
							"type": "Resource",
							"content": "Monotonic Stack",
							"url": "https://leetcode.com/discuss/study-guide/2347639/a-comprehensive-guide-and-template-for-monotonic-stack-based-problems"
						},
						{
							"type": "Resource",
							"content": "Circular Queue",
							"url": "https://www.geeksforgeeks.org/introduction-to-circular-queue/"
						},
						{
							"type": "Project",
							"content": "Make and simulate a restaurant order system",
							"list": [
								"Implement a circular queue to store orders",
								"Handle order placement, retrieval, and cancellation",
								"Implement a queue called ongoing orders to keep track of orders in progress"
							]
						}
					]
				},
				{
					"week": 4,
					"description": "Hashtables, Tries and Pattern Matching",
					"tasks": [
						{
							"type": "Video",
							"content": "Implement a hashtable",
							"url": "https://www.youtube.com/watch?v=2_3fR-k-LzI"
						},
						{
							"type": "Video",
							"content": "Collision Handling",
							"url": "https://www.youtube.com/watch?v=td0h7cv4cc0"
						},
						{
							"type": "Video",
							"content": "Implement a trie",
							"url": "https://www.youtube.com/watch?v=3CbFFVHQrk4"
						},
						{
							"type": "Resource",
							"content": "Boyer Moore String Matching Algorithm",
							"url": "https://medium.com/@siddharth.21/the-boyer-moore-string-search-algorithm-674906cab162"
						},
						{
							"type": "Projects",
							"content": "Easy CLI Projects",
							"list": [
								"Implement a phone directory with hashmaps",
								"A very simple autocomplete text input",
								"CLI based text search tool that efficiently finds patterns in large codebases"
							]
						}
					]
				}
			]
		},
		{
			"month": 2,
			"weeks": [
				{
					"week": 1,
					"description": "Trees and BSTs",
					"tasks": [
						{
							"type": "Video",
							"content": "Introduction to Trees",
							"url": "https://www.youtube.com/watch?v=UbhlOk7vjVY"
						},
						{
							"type": "Video",
							"content": "Binary Tree Traversals",
							"url": "https://www.youtube.com/watch?v=gm8DUJJhmY4"
						},
						{
							"type": "Resource",
							"content": "BFS on a Binary Tree",
							"url": "https://www.enjoyalgorithms.com/blog/level-order-traversal-of-binary-tree"
						},
						{
							"type": "Video",
							"content": "Video Series for Binary Search Trees",
							"url": "https://www.youtube.com/watch?v=sf_9w653xdE&list=PLTxllHdfUq4d-DE16EDkpeb8Z68DU7Z_Q&index=1"
						},
						{
							"type": "Video",
							"content": "AVL Trees Introduction",
							"url": "https://www.youtube.com/watch?v=FNeL18KsWPc"
						},
						{
							"type": "Project",
							"content": "CLI Roguelike Adventure Game",
							"list": [
								"Build a text-based roguelike dungeon crawler where players navigate procedurally generated dungeons using binary trees, manage loot with a BST, and face enemies balanced by an AVL tree"
							],
							"details": {
								"features": [
									"Each dungeon floor is a binary tree where nodes represent rooms. Players choose left or right to explore, with risks and rewards in each path.",
									"Players collect loot (weapons, potions) stored in a BST sorted by power level. Fast search lets players strategize during combat.",
									"Enemy difficulty scales dynamically using an AVL tree to ensure balanced encounters (no unfair fights!)."
								]
							}
						}
					]
				},
				{
					"week": 2,
					"description": "Graphs Basics",
					"tasks": [
						{
							"type": "Video",
							"content": "Introduction to Graphs",
							"url": "https://www.youtube.com/watch?v=gXgEDyodOJU"
						},
						{
							"type": "Video",
							"content": "Edge List Representation",
							"url": "https://www.youtube.com/watch?v=ZdY1Fp9dKzs"
						},
						{
							"type": "Video",
							"content": "Adjacency Matrix Representation",
							"url": "https://www.youtube.com/watch?v=9C2cpQZVRBA"
						},
						{
							"type": "Video",
							"content": "Adjacency List Representation",
							"url": "https://www.youtube.com/watch?v=k1wraWzqtvQ"
						},
						{
							"type": "Video",
							"content": "BFS and DFS",
							"url": "https://www.youtube.com/watch?v=pcKY4hjDrxk"
						},
						{
							"type": "Video",
							"content": "Toplogical Sorting",
							"url": "https://www.youtube.com/watch?v=eL-KzMXSXXI"
						},
						{
							"type": "Resource",
							"content": "Detecting Cycles",
							"urls": [
								"https://www.geeksforgeeks.org/detect-cycle-in-a-graph/",
								"https://www.geeksforgeeks.org/detect-cycle-undirected-graph/"
							]
						},
						{
							"type": "Project",
							"content": "Social Network Friend Recommendation System",
							"list": [
								"Use adjacency matrix for direct friendships",
								"BFS to find friends-of-friends",
								"Cycle detection to identify close-knit groups",
								"Add features like mutual friend counting and community detection"
							]
						}
					]
				},
				{
					"week": 3,
					"description": "Heaps and Priority Queues",
					"tasks": [
						{
							"type": "Video",
							"content": "Heaps and Heap Sort",
							"url": "https://www.youtube.com/watch?v=B7hVxCmfPtM"
						},
						{
							"type": "Resource",
							"content": "Priority Queues",
							"url": "https://www.sanfoundry.com/cpp-program-implements-priority-queue/"
						},
						{
							"type": "Resource",
							"content": "K Way Merge",
							"url": "https://www.geeksforgeeks.org/merge-k-sorted-arrays/"
						},
						{
							"type": "Resource",
							"content": "Djikstra's Algorithm",
							"url": "https://www.youtube.com/watch?v=CerlT7tTZfY"
						},
						{
							"type": "Project",
							"content": "Logistics Network Optimizer",
							"list": [
								"Combine heap-based algorithms and graph theory to build a delivery optimization"
							],
							"details": {
								"features": [
									"Route planning (Dijkstra's with min-heaps)",
									"Multi-warehouse scheduling (k-way merge)",
									"Priority-based task management (custom heaps)"
								]
							}
						}
					]
				},
				{
					"week": 4,
					"description": "Dynamic Programming",
					"tasks": [
						{
							"type": "Video",
							"content": "Dynamic Programming Basics",
							"url": "https://www.youtube.com/watch?v=gK8KmTDtX8E&t=395s"
						},
						{
							"type": "Video",
							"content": "Complete this playlist",
							"url": "https://www.youtube.com/watch?v=5dRGRueKU3M&list=PLJULIlvhz0rE83NKhnq7acXYIeA0o1dXb&index=1"
						},
						{
							"type": "Resource",
							"content": "Memoization",
							"url": "https://www.geeksforgeeks.org/what-is-memoization-a-complete-tutorial/"
						},
						{
							"type": "Resource",
							"content": "Tabulation",
							"url": "https://www.geeksforgeeks.org/tabulation-vs-memoization/"
						},
						{
							"type": "Project",
							"content": "Music Remix Generator",
							"list": [
								"Use dynamic programming to generate a music remix",
								"Use segments like ('verse', 30, 'V1'), ('chorus', 25, 'C1'), etc and generate the most compatible remix"
							]
						}
					]
				}
			]
		}
	]
}